
@using Pin.LiveSports.Core.DTOs
@inject IPlayerService PlayerService

@if (players == null)
{
    <p>Loading players...</p>
}
else
{
    <button class="btn btn-success mb-3" @onclick="ShowAddModal">
        <i class="bi bi-plus"></i> Add Player
    </button>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Country</th>
                <th>Ranking</th>
                <th>Gender</th>
                <th>Birth Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var player in players)
            {
                <tr>
                    <td>@player.Name</td>
                    <td>@player.Country</td>
                    <td>@player.Ranking</td>
                    <td>@player.Gender</td>
                    <td>@player.BirthDate?.ToString("yyyy-MM-dd")</td> <!-- ✅ Datum formatteren -->
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => ShowEditModal(player)">
                            <i class="bi bi-pencil"></i> Edit
                        </button>
                        <button class="btn btn-danger btn-sm ms-2" @onclick="() => DeletePlayer(player.Id)">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Modal Dialog -->
    @if (showModal)
    {
        <div class="modal-backdrop show"></div>
        <div class="modal show d-block" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(currentPlayer.Id == 0 ? "Add Player" : "Edit Player")</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="currentPlayer" OnValidSubmit="HandleSave">
                            <DataAnnotationsValidator />
                            <div class="mb-3">
                                <label class="form-label">Name</label>
                                <InputText @bind-Value="currentPlayer.Name" class="form-control" />
                                <ValidationMessage For="@(() => currentPlayer.Name)" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Country</label>
                                <InputText @bind-Value="currentPlayer.Country" class="form-control" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Ranking</label>
                                <InputNumber @bind-Value="currentPlayer.Ranking" class="form-control" />
                                <ValidationMessage For="@(() => currentPlayer.Ranking)" />
                            </div>
                            @*gender*@
                            <div class="mb-3">
                                <label class="form-label">Gender</label>
                                <InputText @bind-Value="currentPlayer.Gender" class="form-control" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Birth Date</label>
                                <InputDate @bind-Value="currentPlayer.BirthDate" class="form-control" /> <!-- ✅ Input voor datum -->
                                <ValidationMessage For="@(() => currentPlayer.BirthDate)" />
                            </div>
                            <div class="modal-footer">
                                <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-save"></i> Save
                                </button>
                                <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                                    Cancel
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private List<PlayerDTO> players;
    private PlayerDTO currentPlayer = new();
    private bool showModal = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadPlayers();
    }

    private async Task LoadPlayers()
    {
        players = (await PlayerService.GetAllPlayersAsync()).ToList();
    }

    private void ShowAddModal()
    {
        currentPlayer = new PlayerDTO();
        showModal = true;
    }

    private void ShowEditModal(PlayerDTO player)
    {
        currentPlayer = new PlayerDTO
        {
            Id = player.Id,
            Name = player.Name,
            Country = player.Country,
            Ranking = player.Ranking,
            BirthDate = player.BirthDate,
            Gender = player.Gender
        };
        showModal = true;
    }

    private async Task HandleSave()
    {
        //if (currentPlayer.Id == 0)
        //    await PlayerService.AddPlayerAsync(currentPlayer);
        //else
        //    await PlayerService.UpdatePlayerAsync(currentPlayer);

        //await LoadPlayers();
        //showModal = false;

        try
        {
            if (currentPlayer.Id == 0)
                await PlayerService.AddPlayerAsync(currentPlayer);
            else
                await PlayerService.UpdatePlayerAsync(currentPlayer);

            await LoadPlayers(); // ✅ Zorg ervoor dat de lijst opnieuw geladen wordt
            showModal = false;

            StateHasChanged(); // ✅ Forceer UI-update
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving player: {ex.Message}");
        }
    }

    private async Task DeletePlayer(int id)
    {
        try
        {
            await PlayerService.DeletePlayerAsync(id);
            await LoadPlayers();

            StateHasChanged(); // ✅ Forceer UI-update
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error deleting player: {ex.Message}");
        }
    }

    private void CloseModal()
    {
        showModal = false;
    }
}
