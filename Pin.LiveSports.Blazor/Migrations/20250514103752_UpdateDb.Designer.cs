// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pin.LiveSports.Blazor.Data;

#nullable disable

namespace Pin.LiveSports.Blazor.Migrations
{
    [DbContext(typeof(SportDbContext))]
    [Migration("20250514103752_UpdateDb")]
    partial class UpdateDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Pin.LiveSports.Core.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Lin Shidong scoorde een punt",
                            EventType = 1,
                            MatchId = 1,
                            PlayerId = 1,
                            Timestamp = new DateTime(2025, 5, 14, 10, 37, 52, 300, DateTimeKind.Utc).AddTicks(181)
                        },
                        new
                        {
                            Id = 2,
                            Description = "Hugo Calderano scoorde een punt",
                            EventType = 1,
                            MatchId = 2,
                            PlayerId = 3,
                            Timestamp = new DateTime(2025, 5, 14, 10, 37, 52, 300, DateTimeKind.Utc).AddTicks(184)
                        });
                });

            modelBuilder.Entity("Pin.LiveSports.Core.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Player1Id")
                        .HasColumnType("int");

                    b.Property<int>("Player2Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TafelTennisZaal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Player1Id");

                    b.HasIndex("Player2Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Matches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Player1Id = 1,
                            Player2Id = 2,
                            StartTime = new DateTime(2023, 5, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Gepland",
                            TafelTennisZaal = "Tafeltennisvereniging Amsterdam '78 – Baarsjesweg 265 H, 1058 AC Amsterdam",
                            TournamentId = 1
                        },
                        new
                        {
                            Id = 2,
                            Player1Id = 3,
                            Player2Id = 4,
                            StartTime = new DateTime(2023, 5, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Gepland",
                            TafelTennisZaal = "Tafeltennisvereniging Amsterdam '78 – Baarsjesweg 265 H, 1058 AC Amsterdam",
                            TournamentId = 1
                        },
                        new
                        {
                            Id = 3,
                            Player1Id = 1,
                            Player2Id = 3,
                            StartTime = new DateTime(2023, 6, 1, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Gepland",
                            TafelTennisZaal = "Tafeltennisvereniging Rotterdam '78 – Baarsjesweg 265 H, 1058 AC Rotterdam",
                            TournamentId = 2
                        },
                        new
                        {
                            Id = 4,
                            Player1Id = 2,
                            Player2Id = 4,
                            StartTime = new DateTime(2023, 6, 1, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Gepland",
                            TafelTennisZaal = "Tafeltennisvereniging Rotterdam '78 – Baarsjesweg 265 H, 1058 AC Rotterdam",
                            TournamentId = 2
                        },
                        new
                        {
                            Id = 5,
                            Player1Id = 1,
                            Player2Id = 4,
                            StartTime = new DateTime(2023, 7, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Gepland",
                            TafelTennisZaal = "Tafeltennisvereniging Tokyo '78 – Baarsjesweg 265 H, 1058 AC Tokyo",
                            TournamentId = 3
                        });
                });

            modelBuilder.Entity("Pin.LiveSports.Core.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Ranking")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1998, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "China",
                            Gender = "M",
                            Name = "Lin Shidong",
                            Ranking = 1
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1998, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "China",
                            Gender = "M",
                            Name = "Wang Chuqin",
                            Ranking = 2
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1998, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "Brazilië",
                            Gender = "M",
                            Name = "Hugo Calderano",
                            Ranking = 3
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(1998, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "Japan",
                            Gender = "M",
                            Name = "Harimoto Tomokazu",
                            Ranking = 4
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(1998, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "China",
                            Gender = "M",
                            Name = "Liang Jingkun",
                            Ranking = 5
                        });
                });

            modelBuilder.Entity("Pin.LiveSports.Core.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Location = "Amsterdam",
                            Name = "World Championship",
                            StartDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Location = "Rotterdam",
                            Name = "European Championship",
                            StartDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Location = "Tokyo",
                            Name = "Asian Championship",
                            StartDate = new DateTime(2023, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("PlayerTournament", b =>
                {
                    b.Property<int>("PlayersId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentsId")
                        .HasColumnType("int");

                    b.HasKey("PlayersId", "TournamentsId");

                    b.HasIndex("TournamentsId");

                    b.ToTable("PlayerTournament", (string)null);
                });

            modelBuilder.Entity("Pin.LiveSports.Core.Entities.Event", b =>
                {
                    b.HasOne("Pin.LiveSports.Core.Entities.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pin.LiveSports.Core.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Pin.LiveSports.Core.Entities.Match", b =>
                {
                    b.HasOne("Pin.LiveSports.Core.Entities.Player", "Player1")
                        .WithMany()
                        .HasForeignKey("Player1Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pin.LiveSports.Core.Entities.Player", "Player2")
                        .WithMany()
                        .HasForeignKey("Player2Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pin.LiveSports.Core.Entities.Tournament", "Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player1");

                    b.Navigation("Player2");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("PlayerTournament", b =>
                {
                    b.HasOne("Pin.LiveSports.Core.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pin.LiveSports.Core.Entities.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pin.LiveSports.Core.Entities.Tournament", b =>
                {
                    b.Navigation("Matches");
                });
#pragma warning restore 612, 618
        }
    }
}
